#include<stdio.h>
//int main()
//{
//	int a=10;
//	int b=0;
//	b=a<<1;//左移的符号为<<
//	printf("%d\n",b);//10左移后为20
//	return 0;
//}




//int main()
//{
//	int a=-1;
//	int b=a<<1;
//	printf("%d\n",b);//-1在计算机中存放的是补码，所以要先将-1原码写出，变成补码，然后左移1位，最后再将这个补码值变为原码就变为-2
//	return 0;
//}




//int main()
//{
//	int a=8;//&表示按位与
//	int b=10;
//	//a=00000000000000000000000000001000
//	//b=00000000000000000000000000001010
//	//c=00000000000000000000000000001000      (按位与就是只有1*1才是1，其余都是0)
//	int c=a&b;
//	printf("%d\n",c);
//	return 0;
//}



//int main()
//{
//	int a=10;//按位或符号位|
//	int b=8;
//	//a=00000000000000000000000000001000
//	//b=00000000000000000000000000001010
//	//c=00000000000000000000000000001010     （按位或就是上下两个数相加，只有0+0才是0，其余都是1）
//	int c=a|b;
//	printf("%d\n",c);
//	return 0;
//}



//int main()
//{
//	int a=10;//按位异或符号位^
//	int b=8;
//	//a=00000000000000000000000000001000
//	//b=00000000000000000000000000001010
//	//c=00000000000000000000000000000010       (异或就是相同为0，相异为1)
//	int c=a^b;
//	printf("%d\n",c);
//	return 0;
//}





//int main()
//{
//	int a=13;//运用异或的方法去交换两个数
//	int b=41;
//	a=a^b;
//	b=a^b;
//	a=a^b;
//	printf("a=%d b=%d",a,b);
//	return 0;
//}




//int main()//求一个数存储在内存中二进制1的个数
//{
//	int num=0;
//	int i=0;
//	int count=0;
//	scanf("%d",&num);
//	for(i=0;i<32;i++)
//	{
//		if(1==((num>>i)&1))//00000000000000000000000000000110
//		{                  //00000000000000000000000000000001       (让二进制的每一个数都和1相与，得到1说明是1，所以只要将每个数都向右移i个数即可)
//			count++;
//		}
//	}
//	printf("%d\n",count);
//	return 0;
//
//}



//int main()
//{
//	int a=0;//按位取反的符号位~
//	printf("%d\n",~a);//a=0000000000000000000000000000000000补码
//	                  //~a=1111111111111111111111111111111111补码
//	return 0;         //~a=1000000000000000000000000000000001原码 -1
//}




//int main()
//{
//	int a=11;//a=00000000000000000000000000001011  相或  我要让第三个0变为1
//	         //a=00000000000000000000000000000100
//	a=a|(1<<2);//只要让这个a或上一个1然后将这个1向左移两位即可
//	printf("%d\n",a);
//	a=a&~(1<<2);//让这个第三个1再便回到0    a=000000000000000000000000000001111    相与
//	printf("%d\n",a);                  //   a=111111111111111111111111111111011    这个数是由00000000000000000000000000100  取反得到
//	return 0;
//}



//void test1(int arr[])
//{
//	printf("%d\n",sizeof(arr));//arr传过来的是首元素的地址，用指针来接受，指针的大小是4或8，当前平台是32的，所以是4
//}
//void test2(char ch[])
//{
//	printf("%d\n",sizeof(ch));//和上面同样的道理，传过来也要用指针来接受，所以是4
//}
//int main()
//{
//	int arr[10]={0};
//	char ch[10]={0};
//	printf("%d\n",sizeof(arr));//arr的大小就是10*4
//	printf("%d\n",sizeof(ch));//ch的大小就是10*1
//	test1(arr);
//	test2(ch);
//	return 0;
//}



//int main()
//{
//	int a=0;
//	int b=5;
//	int c=a&&b;//逻辑与（&&）就是只有两个都为真，结果才为真，输出是1，否则输出为0
//	printf("%d\n",c);
//	return 0;
//}



//int main()
//{
//	int a=0;
//	int b=5;
//	int c=a||b;//逻辑或（||）就是两个数只要有一个为真，结果就为真，输出1
//	printf("%d\n",c);
//	return 0;
//}



//int main()
//{
//	int i=0;
//	int a=0;
//	int b=2;
//	int c=3;
//	int d=4;
//	i=a++&&++b&&d++;//这边a++是先运算，后加1，那么前面的a是0，为假，逻辑与就是左边一旦为假，后面的都不算，所以后面的++b和d++都不执行
//	printf("a=%d b=%d c=%d d=%d",a,b,c,d);
//	return 0;
//}



//int main()
//{
//	int i=0;
//	int a=1;
//	int b=2;
//	int c=3;
//	int d=4;
//	i=a++||++b||d++;//这边一开始a为1，逻辑或就是前面为1，后面都不执行
//	printf("a=%d b=%d c=%d d=%d",a,b,c,d);
//	return 0;
//}



//int main()
//{
//	int a=6;
//	int b=0;
//	b=(a>5?3:-3);//三目操作符，a大于5吗，大于的话b=3，否则b=-3
//	printf("%d\n",b);
//	return 0;
//
//}




struct student
{
	//描述这个对象的成员变量
	int age;
	char name[20];
	
	char id[20];
};//这个；不能省去！！！


//int main()
//{
//	
//	struct student s1={20, "zhasan" ,"192012137"};
//	struct student*ps=&s1;
//	printf("%d\n",ps->age);
//	printf("%s\n",ps->name);
//	printf("%s\n",ps->id);//两种写法
//	printf("%s\n",s1.name);
//	printf("%d\n", s1.age);
//	printf("%s\n",s1.id);
//	return 0;
//}



int main()
{
	unsigned int a=-1;
	printf("%d\n",a);
	return 0;

}