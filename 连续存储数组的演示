#include<stdio.h>
#include<stdlib.h>
#define initsize 10
typedef struct List //定义一个数组
{
	int *data;
	int maxsize;
	int length;
}List;
void initlist(List*L)//对这个数组进行初始化
{
	L->data=(int*)malloc(sizeof(int)*initsize);
	if(L->data==NULL)
	{
		printf("动态内存开辟失败\n");
		exit(-1);
	}
	L->maxsize=initsize;
	L->length=0;
}
int full_list(List*L) //判读数组是否已满
{
	if(L->length==L->maxsize)
		return 1;
	else
		return 0;
}
void putlist(List*L,int val) //在数组中放数据
{
	if(full_list(L))
	{
		printf("数组已满\n");
		exit(-1);
	}
	else
	{
		L->data[L->length]=val; //一开始length长度为0，所以第一个放的话下标就是0
		L->length++; //放完之后长度加1
	}
}
int empty_list(List*L)//判断数组是否为空
{
	if(L->length==0)
		return 1;
	else
		return 0;

}
void showlist(List*L) //显示数组中的数据
{
	if(empty_list(L))
	{
		printf("数组为空\n");
		exit(-1);
	}
	else
	{
		int i=0;
		for(i=0;i<L->length;i++)
		{
			printf("%d ",L->data[i]);
		}
		printf("\n");
	}
}
void insertlist(List*L,int pos,int val)
{
	int i=0;
	if(full_list(L))
	{
		printf("数组已满\n");
		exit(-1);
	}
	if(pos<1||pos>L->length+1)  //先判断插入的位置到底对不对
	{
		printf("插入的位置有误\n");
		exit(-1);
	}
	for(i=L->length-1;i>=pos-1;i--) //插入式先将后面的数往后移
	{
		L->data[i+1]=L->data[i];
	}
	L->data[pos-1]=val; //把空出的位置放入数据
	L->length++; //记得长度加1
}
int deletelist(List*L,int pos,int *val)
{
	if(empty_list(L))
	{
		printf("数组为空\n");
		return 0;
	}
	else
	{
		int i=0;
		if(pos<1||pos>L->length+1)
		{
			printf("删除位置有误\n");
			exit(-1);
		}
		*val=L->data[pos-1]; //在删之前先把删的数据给val；
		for(i=pos;i<L->length;i++)//删除的方法是把用后面的数覆盖前面的
		{
			L->data[i-1]=L->data[i];
		}
		L->length--; //记住删完后长度减1
		return 1;
	}

}
void reverselist(List *L)
{
	if(empty_list(L))
	{
		printf("数组为空\n");
	}
	else
	{
		int i=0;
		int j=L->length-1;
		while(i<j)
		{
			int tmp=L->data[i];
			L->data[i]=L->data[j];
			L->data[j]=tmp;
			i++;
			j--;
		}
	}
}
void sortlist(List*L)
{
	int i=0;
	int j=0;
	for(i=0;i<L->length-1;i++)
	{
		for(j=0;j<L->length-i-1;j++)
		{
			if(L->data[j]>L->data[j+1])
			{
				int tmp=L->data[j];
				L->data[j]=L->data[j+1];
				L->data[j+1]=tmp;
				

			}
		}
	}
}
int main()
{
	int val;
	struct List L;
	initlist(&L);
	putlist(&L,4);
	putlist(&L,3);
	putlist(&L,2);
	putlist(&L,1);

	/*insertlist(&L,1,9);
	showlist(&L);*/

	/*if(deletelist(&L,3,&val))
	{
		printf("删除成功，删除的元素为：%d\n",val);
	}
	else
	{
		printf("删除失败");
	}
	showlist(&L);*/

	/*reverselist(&L);
	showlist(&L);*/
	sortlist(&L);
	showlist(&L);
	return 0;
}
