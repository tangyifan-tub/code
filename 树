#include<stdio.h>
#include<stdlib.h>

typedef struct Node
{
	int data;
	struct Node*left;
	struct Node*right;
}Node;
Node* creat_tree()
{
	Node*A=(Node*)malloc(sizeof(Node));
	Node*B=(Node*)malloc(sizeof(Node));
	Node*C=(Node*)malloc(sizeof(Node));
	Node*D=(Node*)malloc(sizeof(Node));
	Node*E=(Node*)malloc(sizeof(Node));
	A->data='A';
	B->data='B';
	C->data='C';
	D->data='D';
	E->data='E';
	A->left=B;
	A->right=C;
	B->left=B->right=NULL;
	C->left=D;
	C->right=NULL;
	D->left=NULL;
	D->right=E;
	E->left=E->right=NULL;
	return A;


}
void pre_show_tree(Node*p)
{
	if(p!=NULL)
	{
		printf("%c ",p->data);
	}
	if(p->left!=NULL)
	{
		pre_show_tree(p->left);
	}
	if(p->right!=NULL)
	{
		pre_show_tree(p->right);
	}
}
void In_show_tree(Node*p)
{
	if(p->left!=NULL)
	{
		In_show_tree(p->left);
	}
	if(p!=NULL)
	{
		printf("%c ",p->data);
	}
	if(p->right!=NULL)
	{
		In_show_tree(p->right);
	}
}
void Post_show_tree(Node*p)
{
	if(p->left!=NULL)
	{
		Post_show_tree(p->left);
	}
	if(p->right!=NULL)
	{
		Post_show_tree(p->right);
	}
	if(p!=NULL)
	{
		printf("%c ",p->data);
	}
}
int main()
{
	Node*p=creat_tree();
	pre_show_tree(p);
	printf("\n");
	In_show_tree(p);
	printf("\n");
	Post_show_tree(p);
	return 0;
}
