#include<stdio.h>
//int count_num(unsigned int a)//计算二进制数中1的个数，但这个方法不能计算负数,所以前面加上个unsigned就能解决这个问题
//{
//	int count=0;
//	while(a)
//	{
//		if(a%2==1)
//		{
//			count++;
//
//		}
//		a=a/2;
//	}
//	return count;
//}
//int main()
//{
//	int a=0;
//	int count=0;
//	scanf("%d",&a);
//	count=count_num(a);
//	printf("count=%d",count);
//	return 0;
//}



//int count_num( int a)//方法二，将这个数与1相与，然后再依次向右移
//{
//	int count=0;
//	int i=0;
//	for(i=0;i<32;i++)
//	{
//		if((a>>i)&1==1)
//		{
//			count++;
//		}
//	}
//	return count;
//}
//int main()
//{
//	int a=0;
//	int count=0;
//	scanf("%d",&a);
//	count=count_num(a);
//	printf("count=%d",count);
//	return 0;
//}



//int count_num( int a)//方法三运用的是a&a-1会使a最右边的一个1消失    例如：1011  a      3个1
//{                    //                                                   1010  a-1   
//	int count=0;     //                                                   1010  a      2个1
//	while(a)         //注意这边while里边放a是因为当a=0时这个循环猜停止   1001  a-1                                                                                       
//	{                //                                                   1000  a      1个1
//		    a=a&(a-1);
//			count++;
//		
//	}
//	return count;
//}
//int main()
//{
//	int a=0;
//	int count=0;
//	scanf("%d",&a);
//	count=count_num(a);
//	printf("count=%d",count);
//	return 0;
//}




//int get_num(int m,int n)//计算二进制中不同位的个数
//{
//	int tmp=m^n;//先让两者异或，相异为1,所以只要算出他们相异是1的个数就是不同位的个数
//	int count=0;
//	while(tmp)//这个就是算1的个数
//	{
//		tmp=tmp&(tmp-1);
//		count++;
//	}
//	return count;
//}
//int main()
//{
//	int m=0;
//	int n=0;
//	int count;
//	scanf("%d%d",&m,&n);
//	count=get_num(m,n);
//	
//	printf("%d\n",count);
//  return 0;
//}


//void print(int m)//打印出一个数二进制中的奇数位和偶数位
//{
//	int i=0;
//	printf("奇数位\n");//打印奇数位，你要每位都打印，只要把这个数向右移i位再与1相与就能得到是1还是0   10111001101110011011100110111001
//	for(i=30;i>=0;i-=2)//                                                                             00000000000000000000000000000001
//	{
//		printf("%d ",(m>>i)&1);
//	}
//	printf("\n");
//	printf("偶数位\n");
//	for(i=31;i>=1;i-=2)
//	{
//		printf("%d ",(m>>i)&1);
//	}
//	printf("\n");
//}
//int main()
//{
//	int m=0;
//	scanf("%d",&m);
//	print(m);
//	return 0;
//}





//void print(int *p,int sz)//使用指针去打印数组中的每个元素
//{
//	int i=0;
//	for(i=0;i<sz;i++)
//	{
//		printf("%d ",*(p+i));
//	}
//}
//int main()
//{
//	int arr[10]={1,2,3,4,5,6,7,8,9,10};
//	int sz=sizeof(arr)/sizeof(arr[0]);
//	print(arr,sz);
//	return 0;
//}






//void print_table(int n)//打印任意一行的乘法表
//{
//	int i=0;
//	for(i=1;i<=n;i++)
//	{
//		int j=0;
//		for(j=1;j<=i;j++)
//		{
//			printf("%d*%d=%-3d  ",i,j,i*j);
//		}
//		printf("\n");
//	}
//}
//int main()
//{
//	int n=0;
//	scanf("%d",&n);
//	print_table(n);
//	return 0;
//}





//void original_num(int n)//计算100到200间的素数
//{
//	int i=0;
//	for(i=100;i<=200;i++)
//	{
//		int j=0;
//		for(j=2;j<i;j++)
//		{
//			if(i%j==0)
//			{
//				break;
//			}
//		}
//		if(i==j)
//		{
//			printf("%d ",i);
//		}
//	}
//}
//int main()
//{
//	int n=0;
//	original_num(n);
//	return 0;
//}



//int main()//计算1000到2000之间的闰年，并计算个数
//{
//	int i=0;
//	int count=0;
//	for(i=1000;i<=2000;i++)
//	{
//		if(i%4==0&&i%100!=0||i%400==0)
//		{
//			printf("%d ",i);
//			count++;
//		}
//	}
//	printf("\n");
//	printf("count=%d\n",count);
//	return 0;
//}





//int my_strlen(char* str)//让一个字符数组倒置排列，并且不能用库函数
//{
//	int count=0;
//	while(*str!='\0')
//	{
//		count++;
//		str++;
//	}
//	return count;
//
//}
//void reverse_strlen(char arr[])
//{
//	int left=0;
//	int right=my_strlen(arr)-1;//不能用strlen函数没所以我们就自己写一个函数
//	while(left<right)
//	{
//		int tmp=arr[left];
//		arr[left]=arr[right];
//		arr[right]=tmp;
//		left++;
//		right--;
//	}
//	
//
//}
//int main()
//{
//	char arr[]="abcdef";
//	reverse_strlen(arr);
//	printf("%s\n",arr);
//	return 0;
//}





//int Digitsum(unsigned int num)//用递归的方式去计算一个数各个位相加之和，如1234各个位相加为10
//{
//	if(num>9)
//	{
//		return Digitsum(num/10)+num%10;
//	}
//	else
//	{
//		return num;
//	}
//}
//int main()
//{
//	unsigned int num=0;
//	int ret=0;
//	scanf("%d",&num);
//	
//	ret=Digitsum(num);
//	printf("%d\n",ret);
//	return 0;
//}





//double Pow(int n,int k)//计算n的k次方
//{
//	if(k<0)
//	{
//		return 1/Pow(n,-k);
//	}
//	else if(k==0)
//	{
//		return 1;
//	}
//	else
//	{
//		return n*Pow(n,k-1);
//	}
//}
//int main()
//{
//	int n=0;
//	int k=0;
//	double ret;
//	scanf("%d%d",&n,&k);
//	 ret=Pow(n,k);
//	printf("%lf",ret);
//	return 0;
//
//}