#include<stdio.h>
#include<assert.h>
#include<string.h>
//char* my_strcpy(char*arr1,const char*arr2)
//{
//	char*ret;
//	assert(arr1!=NULL);
//	assert(arr2!=NULL);
//	ret=arr1;
//	while(*arr1++=*arr2++)
//	{
//		;
//	}
//	return ret;
//}
//int main()
//{
//	char arr1[]="abcdef";
//	char arr2[]="abc";
//	my_strcpy(arr1,arr2);
//	printf("%s\n",arr1);
//	return 0;
//}






//char* my_strcat(char*dest,const char*src)
//{
//	char*ret=dest;
//	assert(dest!=NULL);
//	assert(src!=NULL);
//	while(*dest!='\0')//找\0
//	{
//		dest++;
//	}
//	while(*dest++=*src++)//追加字符串
//	{
//		;
//	}
//	return ret;
//}
//int main()
//{
//	char arr1[30]="abc";
//	char arr2[]="defg";
//	my_strcat(arr1,arr2);
//	printf("%s\n",arr1);
//	return 0;
//}






//int main()
//{
//	char arr1[]="abc";
//	char arr2[]="adg";
//	int ret=strcmp(arr1,arr2);
//	printf("%d\n",ret);
//	return 0;
//}





//自己实现以下strcmp这个函数
//int my_strcmp(const char*arr1,const char*arr2)
//{
//	assert(arr1!=NULL);
//	assert(arr2!=NULL);
//	while(*arr1==*arr2)
//	{
//		if(*arr1=='\0')
//		{
//			return 0;
//		}
//		arr1++;
//		arr2++;
//	}
//	if(*arr1<*arr2)
//	{
//		return -1;
//	}
//	else
//	{
//		return 1;
//	}
//
//}
//int main()
//{
//	char arr1[]="abcd";
//	char arr2[]="abcwe";
//	int ret=my_strcmp(arr1,arr2);
//	printf("%d\n",ret);
//	return 0;
//}





//strstr是用来查找子字符串的
//int main()
//{
//	char*p1="abcdefg";
//	char*p2="def";
//	char*ret=strstr(p1,p2);
//	if(ret==NULL)
//	{
//		printf("hh\n");
//	}
//	else
//	{
//		printf("%s\n",ret);
//	}
//	
//	
//	return 0;
//}






//自己模拟实现库函数strstr
//char*my_strstr( char*p1, char*p2)
//{
//	char*s1=p1;
//	char*s2=p2;
//	char*cur=s1;
//	assert(p1!='\0');
//	assert(p2!='\0');
//	
//	if(*p2=='\0')
//	{
//		return p1;
//	}
//	while(*cur)
//	{
//		s1=cur;
//		s2=p2;
//		while((*s1!='\0')&&(*s2!='\0')&&(*s1==*s2))
//		{
//			s1++;
//			s2++;
//		}
//		if(*s2=='\0')
//		{
//			return cur;
//		}
//		cur++;
//
//	}
//
//}
//int main()
//{
//	char arr1[]="abcdefg";
//	char arr2[]="bcd";
//	char*ret=my_strstr(arr1,arr2);
//	printf("%s\n",ret);
//	return 0;
//}



//strtok用来切割字符串
//int main()
//{
//	char arr1[]="134.123.22.34";
//	char*p=".";
//	char* ret=NULL;
//	for(ret=strtok(arr1,p);ret!=NULL;ret=strtok(NULL,p))
//	{
//		printf("%s\n",ret);
//	}
//}




//strerror是用来输出这个errno的错误码
//当发生错误时，会把对应的错误码赋值到errno
//#include<errno.h>
//int main()
//{
//	FILE *pf=fopen("text.txt","r");
//	if(pf==NULL)
//	{
//		printf("%s\n",strerror(errno));
//	}
//	else
//	{
//		printf("success");
//	}
//	return 0;
//}







//字符分类函数  
//isspace 空白字符，换行\n,换页\f，回车\r             
//iscntrl 任何控制字符             
//isdigit 数字0-9
//isxdigit 十六进制数字
//islower 小写字母
//isupper 大写字母
//isalpha 大小写字母
//ispunct 标点符号
//isgraph 任何图形字符
//isprint 任何可打印字符

//#include<ctype.h>
//int main()
//{
//	char arr[]="I Am A STUDENT";
//	int i=0;
//	while(arr[i]!='\0')
//	{
//		if(isupper(arr[i]))//isupper是判断是否为大写字母
//		{
//			arr[i]=tolower(arr[i]);//tolower是将大写字母变为小写字母
//		}
//		i++;
//	}
//	printf("%s\n",arr);
//	return 0;
//}




//实现memcoy这个函数
//void* my_memcpy(void*dest,void*src,size_t num)
//{
//	void*ret=dest;
//	assert(dest!=NULL);
//	assert(src!=NULL);
//	while(num--)
//	{
//		*((char*)dest)=*((char*)src);
//		++(char*)dest;
//		++(char*)src;
//	}
//	return ret;
//}
//int main()
//{
//	int arr1[]={1,2,3,4,5};
//	int arr2[5]={0};
//	int i=0;
//	my_memcpy(arr2,arr1,sizeof(arr1));
//	for(i=0;i<5;i++)
//	{
//		printf("%d ",arr2[i]);
//	}
//	
//
//	
//	return 0;
//}






//void*my_memmove(void*dest,const void*src,size_t count)
//{   void*ret=dest;
//	assert(dest!='\0');
//	assert(src!='\0');
//	
//	if(dest<src)
//	{
//		while(count--)
//		{
//			*((char*)dest)=*((char*)src);
//			++(char*)dest;
//			++(char*)src;
//		}
//	}
//	else
//	{
//		while(count--)
//		{
//			*((char*)dest+count)=*((char*)src+count);
//
//		}
//	
//	
//	}
//	return ret;
//}
//int main()
//{
//	int arr1[]={1,2,3,4,5,6,7,8,9};
//	my_memmove(arr1+2,arr1,20);
//	return 0;
//}





//memcmp的具体用法
//int main()
//{
//	int arr1[]={1,2,3,4,5,};
//	int arr2[]={1,2,5,6,};
//	int ret=memcmp(arr1,arr2,12);
//	printf("%d\n",ret);
//	return 0;
//}



//memset是用来设置字符串的
//int main()
//{
//	char arr[10]="";
//	memset(arr,'#',10);
//	return 0;
//}